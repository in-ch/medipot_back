name: 도커 이미지를 빌드하고 ECS에 푸시하자.

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v2

      - name: 가져온 환경 변수 출력
        run: |
          echo "${{ secrets.ENV }}" > .dev.env
          echo "${{ secrets.ENV }}" > .prod.env

      - name: package.json에서 어플리케이션 버전 가져오기
        id: package_version
        run: echo "::set-output name=VERSION::$(cat package.json | jq -r .version)"

      - name: AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Amazon ECR에 로그인
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Docker 이미지 빌드 및 푸시
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          IMAGE_TAG: ${{ steps.package_version.outputs.VERSION }}
        run: |
          docker build -t medipot-back .
          docker tag medipot-back $ECR_REGISTRY/medipot-back:$IMAGE_TAG
          docker push $ECR_REGISTRY/medipot-back:$IMAGE_TAG

  # deploy-to-ec2:
  #   runs-on: ubuntu-latest
  #   needs: build-and-push
  #   steps:
  #     - name: 코드 체크아웃
  #       uses: actions/checkout@v2

  #     - name: AWS credentials 설정
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     - name: package.json에서 어플리케이션 버전 가져오기
  #       id: package_version
  #       run: echo "::set-output name=VERSION::$(cat package.json | jq -r .version)"

  #     - name: 가져온 환경 변수 출력
  #       run: |
  #         echo "${{ secrets.ENV }}" > .dev.env
  #         echo "${{ secrets.ENV }}" > .prod.env

  #     - name: SSH로 EC2에 접속
  #       uses: appleboy/ssh-action@master
  #       env:
  #         ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  #         IMAGE_TAG: ${{ steps.package_version.outputs.VERSION }}
  #       with:
  #         host: ${{ secrets.EC2_HOST }}
  #         username: ${{ secrets.EC2_USERNAME }}
  #         key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
  #         port: ${{ secrets.EC2_SSH_PORT }}
  #         script: |
  #           # 프로젝트 디렉토리로 이동
  #           cd medipot_back

  #           # ECR에서 Docker 이미지를 가져오기
  #           docker pull $ECR_REGISTRY/medipot-back:$IMAGE_TAG

  #           # 새로운 Docker 컨테이너 실행
  #           docker run -d --name $ECR_REGISTRY/medipot-back:$IMAGE_TAG -p 80:4000 $ECR_REGISTRY/medipot-back:$IMAGE_TAG
